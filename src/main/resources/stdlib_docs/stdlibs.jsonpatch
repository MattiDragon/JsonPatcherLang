# This file contains documentation comments for the standard library
# The actual libraries are defined in java code


#| module functions
#| Provides utilities for working with functions. 
#| Some of the can be used as methods on function objects.

#| value functions.bind: (function: function, arg: any, index?: number) -> function
#| Binds the specified argument to the function at the specified index or 0 if none is provided.
#| *Can be used as a method*

#| value functions.then: (function: function, then: function) -> function
#| Creates a new function that calls the first function and then calls the second function on it's return value.
#| *Can be used as a method*

#| value functions.identity: () -> (value: any) -> any
#| Returns a function that returns its single argument.

#| value functions.constant: (value: any) -> () -> any
#| Returns a function that always returns the specified value.


#| module objects
#| Provides utilities for working with objects.

#| value objects.keys: (object: object) -> [string]
#| Returns the list of keys in a object.


#| module strings
#| Provides utilities for manipulating strings. Many of the methods in this module can be used as methods.

#| value strings.matches: (string: string, regex: string) -> boolean
#| Checks if the whole string matches a specific regular expression.

#| value strings.replace: (string: string, pattern: string, replacement: string) -> string
#| Replaces all instances of `pattern` in `string` with `replacement`.

#| value strings.replaceRegex: (string: string, pattern: string, replacement: string) -> string
#| Replaces all matches of the regular expression `pattern` in `string` with `replacement`.

#| value strings.split: (string: string, delimiter: string) -> array
#| Splits the string into into an array with the specified delimiter

#| value strings.toLowerCase: (string: string) -> string
#| Converts the string to lowercase with the root locale

#| value strings.toUpperCase: (string: string) -> string
#| Converts the string to uppercase with the root locale

#| value strings.trim: (string: string) -> string
#| Trim the string by removing leading and trailing whitespace

#| value strings.trimStart: (string: string) -> string
#| Trim the string by removing leading whitespace

#| value strings.trimEnd: (string: string) -> string
#| Trim the string by removing trailing whitespace

#| value strings.startsWith: (string: string, prefix: string) -> boolean
#| Returns true if the string starts with the specified prefix

#| value strings.endsWith: (string: string, suffix: string) -> boolean
#| Returns true if the string ends with the specified suffix

#| value strings.contains: (string: string, substring: string) -> boolean
#| Returns true if the string contains the specified substring

#| value strings.length: (string: string) -> number
#| Returns the length of the string in unicode code units

#| value strings.isEmpty: (string: string) -> boolean
#| Returns true if the string is empty (length == 0)

#| value strings.isBlank: (string: string) -> boolean
#| Returns true if the string only contains whitespace characters

#| value strings.charAt: (string: string, index: number) -> string
#| Returns a string consisting of only the character at the specified index

#| value strings.chars: (string: string) -> array
#| Returns an array of strings with each character from this string

#| value strings.substring: (string: string, from: number, to?: number) -> string
#| Returns a substring from the specified start index (inclusive) to the specified end index, if specified (exclusive)

#| value strings.asString: (value: any) -> string
#| Converts any value to a string

#| value strings.join: (array: array, string: delimiter) -> string
#| Converts all values in the array to a string and concatenates them with the delimiter in between


#| module arrays
#| The arrays library contains functions for manipulating arrays.
#| All of them can be used as methods on arrays.

#| value arrays.insert: (array: array, index: number, value: any) -> array
#| Inserts the specified value at the specified index. The inserted value will be found that the index after the insertion.

#| value arrays.push: (array: array, value: any) -> array
#| Appends the specified value to the end of the array. Returns the array.

#| value arrays.pop: (array: array) -> any
#| Removes the last element from the array and returns it.

#| value arrays.remove: (array: array, value: any) -> array
#| Removes the first occurrence of the specified value from the array. Returns the array.

#| value arrays.removeAt: (array: array, index: number) -> array
#| Removes the value at the specified index from the array. Returns the array.

#| value arrays.map: (array: array, function: function) -> array
#| Applies the specified function to each element in the array, creating a new array and returns the result.

#| value arrays.mapped: (array: array, function: function) -> array
#| Applies the specified function to each element in the array modifying them in p

#| value arrays.filter: (array: array, function: function) -> array
#| Applies the specified function to each element in the array, creating a new array with only the elements that returned true.

#| value arrays.filtered: (array: array, function: function) -> array
#| Applies the specified function to each element in the array, removing the elements that returned false.

#| value arrays.reduce: (array: array, function: function, initial: any) -> any
#| Iterates through the array applying the specified function to each element and the current state, beginning with the initial value and being replaced by the returned value from the function. Returns the last state.

#| value arrays.slice: (array: array, from: number, to?: number) -> array
#| Returns a slice of the array from the specified start index (inclusive) to the specified end index (exclusive)

#| value arrays.indexOf: (array: array, value: any) -> number
#| Returns the index of the index of the value in the array, or -1 if it isn't present


#| module debug
#| Provides various functions for debugging code.

#| value debug.assert: (value: any, message?: string) -> null
#| Checks if the value is truthy. If it is nothing happens. If it isn't, then an error is thrown.

#| value debug.throw: (message: any) -> null
#| Throws an error. Use this if your code gets in situations it shouldn't.


#| module math
#| The math library contains many functions for performing mathematical operations.

#| value math.PI: number

#| value math.E: number

#| value math.NaN: number

#| value math.POSITIVE_INFINITY: number

#| value math.NEGATIVE_INFINITY: number

#| value math.asin: (input: number) -> number

#| value math.sin: (input: number) -> number

#| value math.sinh: (input: number) -> number

#| value math.acos: (input: number) -> number

#| value math.cos: (input: number) -> number

#| value math.cosh: (input: number) -> number

#| value math.atan: (input: number) -> number

#| value math.tan: (input: number) -> number

#| value math.tanh: (input: number) -> number

#| value math.exp: (input: number) -> number

#| value math.log: (input: number) -> number

#| value math.log10: (input: number) -> number

#| value math.sqrt: (input: number) -> number

#| value math.cbrt: (input: number) -> number

#| value math.ceil: (input: number) -> number

#| value math.floor: (input: number) -> number

#| value math.abs: (input: number) -> number

#| value math.signum: (input: number) -> number

#| value math.max: (first: number, second: number) -> number

#| value math.min: (first: number, second: number) -> number
