#| module strings
#| Provides utilities for manipulating strings. Many of the methods in this module can be used as methods.

#| value strings.matches: (string: string, regex: string) -> boolean
#| Checks if the whole string matches a specific regular expression.

#| value strings.replace: (string: string, pattern: string, replacement: string) -> string
#| Replaces all instances of `pattern` in `string` with `replacement`.

#| value strings.replaceRegex: (string: string, pattern: string, replacement: string) -> string
#| Replaces all matches of the regular expression `pattern` in `string` with `replacement`.

#| value strings.split: (string: string, delimiter: string) -> array
#| Splits the string into into an array with the specified delimiter

#| value strings.toLowerCase: (string: string) -> string
#| Converts the string to lowercase with the root locale

#| value strings.toUpperCase: (string: string) -> string
#| Converts the string to uppercase with the root locale

#| value strings.trim: (string: string) -> string
#| Trim the string by removing leading and trailing whitespace

#| value strings.trimStart: (string: string) -> string
#| Trim the string by removing leading whitespace

#| value strings.trimEnd: (string: string) -> string
#| Trim the string by removing trailing whitespace

#| value strings.startsWith: (string: string, prefix: string) -> boolean
#| Returns true if the string starts with the specified prefix

#| value strings.endsWith: (string: string, suffix: string) -> boolean
#| Returns true if the string ends with the specified suffix

#| value strings.contains: (string: string, substring: string) -> boolean
#| Returns true if the string contains the specified substring

#| value strings.length: (string: string) -> number
#| Returns the length of the string in unicode code units

#| value strings.isEmpty: (string: string) -> boolean
#| Returns true if the string is empty (length == 0)

#| value strings.isBlank: (string: string) -> boolean
#| Returns true if the string only contains whitespace characters

#| value strings.charAt: (string: string, index: number) -> string
#| Returns a string consisting of only the character at the specified index

#| value strings.chars: (string: string) -> array
#| Returns an array of strings with each character from this string

#| value strings.substring: (string: string, from: number, to?: number) -> string
#| Returns a substring from the specified start index (inclusive) to the specified end index, if specified (exclusive)

#| value strings.asString: (value: any) -> string
#| Converts any value to a string

#| value strings.join: (array: array, string: delimiter) -> string
#| Converts all values in the array to a string and concatenates them with the delimiter in between